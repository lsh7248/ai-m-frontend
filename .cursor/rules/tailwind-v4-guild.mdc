---
description: Tailwind Css v4 버전 개발 가이드 문서
globs: 
alwaysApply: false
---
# Tailwind CSS v4 설정 가이드

## 목차
1. [소개](#소개)
2. [주요 변경 사항](#주요-변경-사항)
3. [설치 및 설정](#설치-및-설정)
4. [CSS-first 테마 설정](#css-first-테마-설정)
5. [Figma 디자인 시스템 통합](#figma-디자인-시스템-통합)
6. [고급 기능](#고급-기능)
7. [문제 해결](#문제-해결)

## 소개

Tailwind CSS v4는 성능과 유연성을 위해 최적화된 새로운 버전으로, 설정 및 커스터마이징 경험을 재구성하고 최신 웹 플랫폼의 발전을 최대한 활용합니다. 이 가이드는 Tailwind CSS v4를 Vue 3 및 Vite 프로젝트에 통합하는 방법을 설명합니다.

## 주요 변경 사항

Tailwind CSS v4는 이전 버전과 비교하여 다음과 같은 주요 변경 사항이 있습니다:

- **고성능 엔진**: 전체 빌드는 최대 5배 빠르고, 증분 빌드는 100배 이상 빠릅니다.
- **간소화된 설치**: 의존성이 적고, 설정이 필요 없으며, CSS 파일에 한 줄의 코드만 추가하면 됩니다.
- **Vite 플러그인**: 최대 성능과 최소 설정을 위한 공식 Vite 플러그인을 제공합니다.
- **자동 콘텐츠 감지**: 모든 템플릿 파일이 자동으로 감지되어 설정이 필요 없습니다.
- **CSS-first 설정**: JavaScript 설정 파일 대신 CSS에서 직접 프레임워크를 커스터마이징합니다.
- **CSS 테마 변수**: 모든 디자인 토큰이 네이티브 CSS 변수로 노출되어 어디서든 접근할 수 있습니다.
- **P3 색상 팔레트**: 현대적인 디스플레이 기술을 최대한 활용하는 더 생생한 색상 팔레트를 제공합니다.
- **컨테이너 쿼리**: 컨테이너 크기에 따라 요소 스타일을 지정하는 기능을 제공합니다.

## 설치 및 설정

### 1. 패키지 설치

```bash
npm install -D tailwindcss @tailwindcss/vite
```

### 2. Vite 설정 파일 수정

```typescript
// vite.config.ts
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
  plugins: [vue(), tailwindcss()],
})
```

### 3. CSS 파일에 Tailwind 임포트

```css
/* src/style.css */
@import "tailwindcss";

/* 기존 스타일 */
```

이 간단한 설정만으로 Tailwind CSS v4의 모든 기능을 사용할 수 있습니다. 이전 버전과 달리 `postcss.config.js` 파일이나 `tailwind.config.js` 파일이 필요하지 않습니다.

## CSS-first 테마 설정

Tailwind CSS v4에서는 CSS에서 직접 테마를 구성하는 것이 권장됩니다:

```css
/* src/style.css */
@import "tailwindcss";

@theme {
  /* 색상 */
  --color-primary: oklch(0.6 0.2 240);
  --color-secondary: oklch(0.9 0.03 240);
  --color-accent: oklch(0.8 0.2 30);
  
  /* 폰트 */
  --font-sans: "Inter", sans-serif;
  --font-display: "Satoshi", "sans-serif";
  --font-mono: "IBM Plex Mono", monospace;
  
  /* 타이포그래피 */
  --text-tiny: 0.625rem;
  --text-tiny--line-height: 1.5rem;
  
  /* 간격 */
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
  --spacing-xl: 2rem;
  
  /* 브레이크포인트 */
  --breakpoint-sm: 640px;
  --breakpoint-md: 768px;
  --breakpoint-lg: 1024px;
  --breakpoint-xl: 1280px;
  --breakpoint-2xl: 1536px;
  --breakpoint-3xl: 1920px;
  
  /* 애니메이션 */
  --ease-fluid: cubic-bezier(0.3, 0, 0, 1);
  --ease-snappy: cubic-bezier(0.2, 0, 0, 1);
}
```

각 CSS 변수는 네임스페이스에 따라 해당 유틸리티와 연결됩니다:

- `--font-*`: 폰트 패밀리 유틸리티 (`font-sans`, `font-display` 등)
- `--text-*`: 폰트 크기 유틸리티 (`text-tiny`, `text-sm` 등)
- `--color-*`: 색상 유틸리티 (`text-primary`, `bg-secondary` 등)
- `--spacing-*`: 간격 유틸리티 (`p-xs`, `m-sm` 등)
- `--breakpoint-*`: 반응형 브레이크포인트 (`sm:`, `md:` 등)
- `--ease-*`: 전환 타이밍 함수 (`ease-fluid`, `ease-snappy` 등)

### CSS 변수 사용의 이점

이 방식을 사용하면 테마 값을 CSS 변수로 직접 접근할 수 있어 다음과 같은 이점이 있습니다:

1. **임의 값에서 테마 변수 직접 사용**:
   ```html
   <div class="p-[var(--spacing-sm)] text-[var(--color-primary)]">...</div>
   ```

2. **JavaScript에서 테마 값 접근**:
   ```javascript
   element.style.marginTop = 'var(--spacing-sm)';
   ```

3. **프레임워크 통합 용이**:
   ```jsx
   // Framer Motion 예시
   <motion.div
     initial={{ y: "var(--spacing-md)" }}
     animate={{ y: 0 }}
     exit={{ y: "var(--spacing-md)" }}
   >
     {children}
   </motion.div>
   ```

### 기본 테마 재정의

기본적으로 CSS 변수를 추가하면 Tailwind CSS v3의 `extend`처럼 동작합니다. 전체 네임스페이스를 재정의하려면 `--font-*: initial`과 같은 구문을 사용합니다:

```css
@theme {
  /* 기본 폰트 패밀리 유틸리티를 모두 제거 */
  --font-*: initial;
  
  /* 새로운 폰트 패밀리 유틸리티만 정의 */
  --font-display: "Satoshi", "sans-serif";
  --font-body: "Inter", sans-serif;
}
```

전체 기본 테마를 제거하려면 `--*: initial`을 사용합니다:

```css
@theme {
  --*: initial;
  
  /* 이제 모든 테마 값을 직접 정의해야 합니다 */
}
```

### 폰트 크기 유틸리티 설정

폰트 크기에 대한 기본 행 높이, 폰트 두께 또는 자간을 설정하려면 이중 대시를 사용하여 지원 변수를 추가합니다:

```css
@theme {
  --text-big: 16rem;
  --text-big--line-height: 18rem;
  --text-big--font-weight: 550;
  --text-big--letter-spacing: -0.025em;
}
```

## Figma 디자인 시스템 통합

Figma의 디자인 시스템을 Tailwind CSS v4에 통합하는 방법:

### 1. 색상 추출

Figma의 색상 스타일을 CSS 변수로 추출하여 `@theme` 블록에 정의합니다:

```css
@theme {
  /* Figma 색상 스타일 */
  --color-primary-100: oklch(0.97 0.03 240);
  --color-primary-200: oklch(0.92 0.06 240);
  --color-primary-300: oklch(0.85 0.1 240);
  --color-primary-400: oklch(0.78 0.15 240);
  --color-primary-500: oklch(0.7 0.2 240);
  --color-primary-600: oklch(0.63 0.22 240);
  --color-primary-700: oklch(0.56 0.24 240);
  --color-primary-800: oklch(0.48 0.26 240);
  --color-primary-900: oklch(0.4 0.28 240);
  --color-primary-950: oklch(0.3 0.3 240);
}
```

### 2. 타이포그래피 추출

Figma의 텍스트 스타일을 CSS 변수로 정의합니다:

```css
@theme {
  /* Figma 텍스트 스타일 */
  --font-display: "Pretendard", sans-serif;
  --font-body: "Pretendard", sans-serif;
  
  --text-heading-1: 2.5rem;
  --text-heading-1--line-height: 3rem;
  --text-heading-1--font-weight: 700;
  --text-heading-1--letter-spacing: -0.025em;
  
  --text-heading-2: 2rem;
  --text-heading-2--line-height: 2.5rem;
  --text-heading-2--font-weight: 700;
  --text-heading-2--letter-spacing: -0.025em;
  
  /* 추가 텍스트 스타일 */
}
```

### 3. 간격 추출

Figma의 레이아웃 그리드와 간격을 CSS 변수로 정의합니다:

```css
@theme {
  /* Figma 간격 시스템 */
  --spacing-1: 0.25rem;
  --spacing-2: 0.5rem;
  --spacing-3: 0.75rem;
  --spacing-4: 1rem;
  --spacing-6: 1.5rem;
  --spacing-8: 2rem;
  --spacing-12: 3rem;
  --spacing-16: 4rem;
  --spacing-24: 6rem;
  --spacing-32: 8rem;
}
```

### 4. 컴포넌트 구현

Figma 컴포넌트를 Tailwind 클래스를 사용하여 구현합니다:

```html
<!-- Figma의 버튼 컴포넌트 구현 -->
<button class="bg-primary-500 text-white px-4 py-2 rounded-md hover:bg-primary-600 transition-colors">
  버튼 텍스트
</button>

<!-- Figma의 카드 컴포넌트 구현 -->
<div class="bg-white p-6 rounded-lg shadow-md">
  <h3 class="text-heading-2 text-gray-900 mb-2">카드 제목</h3>
  <p class="text-body text-gray-600">카드 내용</p>
</div>
```

## 고급 기능

### 1. 컨테이너 쿼리

Tailwind CSS v4에서는 컨테이너 쿼리를 지원합니다:

```html
<div class="@container">
  <div class="@md:text-lg @lg:text-xl @xl:text-2xl">
    컨테이너 크기에 따라 텍스트 크기가 변경됩니다.
  </div>
</div>
```

### 2. 3D 변환

3D 공간에서 요소를 변환할 수 있습니다:

```html
<div class="rotate-x-45 rotate-y-45 perspective-500">
  3D 변환이 적용된 요소
</div>
```

### 3. 그라데이션 API

방사형 및 원뿔형 그라데이션, 보간 모드 등을 지원합니다:

```html
<div class="bg-gradient-to-r from-primary-500 to-secondary-500 via-accent-500 bg-gradient-hue">
  그라데이션이 적용된 요소
</div>
```

### 4. @starting-style 지원

JavaScript 없이 진입 및 종료 전환을 만들 수 있는 새로운 변형을 제공합니다:

```html
<div class="opacity-100 transition-opacity duration-300 starting:opacity-0">
  페이드 인 효과가 적용된 요소
</div>
```

### 5. not-* 변형

다른 변형, 사용자 정의 선택기 또는 미디어/기능 쿼리와 일치하지 않을 때만 요소의 스타일을 지정할 수 있습니다:

```html
<div class="not-dark:bg-white dark:bg-gray-800">
  다크 모드가 아닐 때만 흰색 배경이 적용됩니다.
</div>
```

## 문제 해결

### 1. 스타일이 적용되지 않는 경우

- Tailwind 설정과 CSS 파일 임포트를 확인하세요.
- 개발 서버를 재시작해보세요.
- 브라우저 개발자 도구에서 CSS 변수가 제대로 정의되었는지 확인하세요.

### 2. 빌드 오류

- 모든 의존성이 최신 버전인지 확인하세요.
- Vite와 Tailwind CSS 버전이 호환되는지 확인하세요.

### 3. 성능 최적화

- 개발 중에는 `@apply` 사용을 최소화하세요.
- 불필요한 CSS 변수 정의를 피하세요.
- 큰 프로젝트의 경우 코드 분할을 고려하세요. 